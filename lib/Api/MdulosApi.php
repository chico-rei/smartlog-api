<?php
/**
 * MdulosApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Smartlog
 *
 * API para cálculo de valor de frete,rastreamento de encomendas e CEP's atendidos na plataforma Smartlog
 *
 * OpenAPI spec version: 2.0.1
 * Contact: junior@sistemasmartlog.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * MdulosApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MdulosApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cEPsAtendidosColetaPhpGet
     *
     * Consultar os CEP's onde a coleta está disponível
     *
     * @param  string $cnpj cnpj (required)
     * @param  string $token token (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cEPsAtendidosColetaPhpGet($cnpj, $token)
    {
        $this->cEPsAtendidosColetaPhpGetWithHttpInfo($cnpj, $token);
    }

    /**
     * Operation cEPsAtendidosColetaPhpGetWithHttpInfo
     *
     * Consultar os CEP's onde a coleta está disponível
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cEPsAtendidosColetaPhpGetWithHttpInfo($cnpj, $token)
    {
        $returnType = '';
        $request = $this->cEPsAtendidosColetaPhpGetRequest($cnpj, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cEPsAtendidosColetaPhpGetAsync
     *
     * Consultar os CEP's onde a coleta está disponível
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cEPsAtendidosColetaPhpGetAsync($cnpj, $token)
    {
        return $this->cEPsAtendidosColetaPhpGetAsyncWithHttpInfo($cnpj, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cEPsAtendidosColetaPhpGetAsyncWithHttpInfo
     *
     * Consultar os CEP's onde a coleta está disponível
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cEPsAtendidosColetaPhpGetAsyncWithHttpInfo($cnpj, $token)
    {
        $returnType = '';
        $request = $this->cEPsAtendidosColetaPhpGetRequest($cnpj, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cEPsAtendidosColetaPhpGet'
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cEPsAtendidosColetaPhpGetRequest($cnpj, $token)
    {
        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling cEPsAtendidosColetaPhpGet'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling cEPsAtendidosColetaPhpGet'
            );
        }

        $resourcePath = '/CEPsAtendidosColeta.php';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cnpj !== null) {
            $queryParams['CNPJ'] = ObjectSerializer::toQueryValue($cnpj);
        }
        // query params
        if ($token !== null) {
            $queryParams['Token'] = ObjectSerializer::toQueryValue($token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cEPsAtendidosEntregaPhpGet
     *
     * Consultar os CEP's onde a entrega está disponível
     *
     * @param  string $cnpj cnpj (required)
     * @param  string $token token (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cEPsAtendidosEntregaPhpGet($cnpj, $token)
    {
        $this->cEPsAtendidosEntregaPhpGetWithHttpInfo($cnpj, $token);
    }

    /**
     * Operation cEPsAtendidosEntregaPhpGetWithHttpInfo
     *
     * Consultar os CEP's onde a entrega está disponível
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cEPsAtendidosEntregaPhpGetWithHttpInfo($cnpj, $token)
    {
        $returnType = '';
        $request = $this->cEPsAtendidosEntregaPhpGetRequest($cnpj, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cEPsAtendidosEntregaPhpGetAsync
     *
     * Consultar os CEP's onde a entrega está disponível
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cEPsAtendidosEntregaPhpGetAsync($cnpj, $token)
    {
        return $this->cEPsAtendidosEntregaPhpGetAsyncWithHttpInfo($cnpj, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cEPsAtendidosEntregaPhpGetAsyncWithHttpInfo
     *
     * Consultar os CEP's onde a entrega está disponível
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cEPsAtendidosEntregaPhpGetAsyncWithHttpInfo($cnpj, $token)
    {
        $returnType = '';
        $request = $this->cEPsAtendidosEntregaPhpGetRequest($cnpj, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cEPsAtendidosEntregaPhpGet'
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cEPsAtendidosEntregaPhpGetRequest($cnpj, $token)
    {
        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling cEPsAtendidosEntregaPhpGet'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling cEPsAtendidosEntregaPhpGet'
            );
        }

        $resourcePath = '/CEPsAtendidosEntrega.php';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cnpj !== null) {
            $queryParams['CNPJ'] = ObjectSerializer::toQueryValue($cnpj);
        }
        // query params
        if ($token !== null) {
            $queryParams['Token'] = ObjectSerializer::toQueryValue($token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cotacaoPhpPost
     *
     * Realizar cotação de valor de frete
     *
     * @param  string $cnpj cnpj (required)
     * @param  string $token token (required)
     * @param  float $peso peso (required)
     * @param  string $cep_destino cep_destino (required)
     * @param  float $valor valor (required)
     * @param  float $volumes volumes (required)
     * @param  float $altura altura (required)
     * @param  float $largura largura (required)
     * @param  float $comprimento comprimento (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cotacaoPhpPost($cnpj, $token, $peso, $cep_destino, $valor, $volumes, $altura, $largura, $comprimento)
    {
        return $this->cotacaoPhpPostWithHttpInfo($cnpj, $token, $peso, $cep_destino, $valor, $volumes, $altura, $largura, $comprimento);
    }

    /**
     * Operation cotacaoPhpPostWithHttpInfo
     *
     * Realizar cotação de valor de frete
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     * @param  float $peso (required)
     * @param  string $cep_destino (required)
     * @param  float $valor (required)
     * @param  float $volumes (required)
     * @param  float $altura (required)
     * @param  float $largura (required)
     * @param  float $comprimento (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cotacaoPhpPostWithHttpInfo($cnpj, $token, $peso, $cep_destino, $valor, $volumes, $altura, $largura, $comprimento)
    {
        $returnType = '';
        $request = $this->cotacaoPhpPostRequest($cnpj, $token, $peso, $cep_destino, $valor, $volumes, $altura, $largura, $comprimento);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return $response;

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cotacaoPhpPostAsync
     *
     * Realizar cotação de valor de frete
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     * @param  float $peso (required)
     * @param  string $cep_destino (required)
     * @param  float $valor (required)
     * @param  float $volumes (required)
     * @param  float $altura (required)
     * @param  float $largura (required)
     * @param  float $comprimento (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cotacaoPhpPostAsync($cnpj, $token, $peso, $cep_destino, $valor, $volumes, $altura, $largura, $comprimento)
    {
        return $this->cotacaoPhpPostAsyncWithHttpInfo($cnpj, $token, $peso, $cep_destino, $valor, $volumes, $altura, $largura, $comprimento)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cotacaoPhpPostAsyncWithHttpInfo
     *
     * Realizar cotação de valor de frete
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     * @param  float $peso (required)
     * @param  string $cep_destino (required)
     * @param  float $valor (required)
     * @param  float $volumes (required)
     * @param  float $altura (required)
     * @param  float $largura (required)
     * @param  float $comprimento (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cotacaoPhpPostAsyncWithHttpInfo($cnpj, $token, $peso, $cep_destino, $valor, $volumes, $altura, $largura, $comprimento)
    {
        $returnType = '';
        $request = $this->cotacaoPhpPostRequest($cnpj, $token, $peso, $cep_destino, $valor, $volumes, $altura, $largura, $comprimento);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cotacaoPhpPost'
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     * @param  float $peso (required)
     * @param  string $cep_destino (required)
     * @param  float $valor (required)
     * @param  float $volumes (required)
     * @param  float $altura (required)
     * @param  float $largura (required)
     * @param  float $comprimento (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cotacaoPhpPostRequest($cnpj, $token, $peso, $cep_destino, $valor, $volumes, $altura, $largura, $comprimento)
    {
        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling cotacaoPhpPost'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling cotacaoPhpPost'
            );
        }
        // verify the required parameter 'peso' is set
        if ($peso === null || (is_array($peso) && count($peso) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $peso when calling cotacaoPhpPost'
            );
        }
        // verify the required parameter 'cep_destino' is set
        if ($cep_destino === null || (is_array($cep_destino) && count($cep_destino) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cep_destino when calling cotacaoPhpPost'
            );
        }
        // verify the required parameter 'valor' is set
        if ($valor === null || (is_array($valor) && count($valor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $valor when calling cotacaoPhpPost'
            );
        }
        // verify the required parameter 'volumes' is set
        if ($volumes === null || (is_array($volumes) && count($volumes) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $volumes when calling cotacaoPhpPost'
            );
        }
        // verify the required parameter 'altura' is set
        if ($altura === null || (is_array($altura) && count($altura) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $altura when calling cotacaoPhpPost'
            );
        }
        // verify the required parameter 'largura' is set
        if ($largura === null || (is_array($largura) && count($largura) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $largura when calling cotacaoPhpPost'
            );
        }
        // verify the required parameter 'comprimento' is set
        if ($comprimento === null || (is_array($comprimento) && count($comprimento) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comprimento when calling cotacaoPhpPost'
            );
        }

        $resourcePath = '/Cotacao.php';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($cnpj !== null) {
            $formParams['CNPJ'] = ObjectSerializer::toFormValue($cnpj);
        }
        // form params
        if ($token !== null) {
            $formParams['Token'] = ObjectSerializer::toFormValue($token);
        }
        // form params
        if ($peso !== null) {
            $formParams['Peso'] = ObjectSerializer::toFormValue($peso);
        }
        // form params
        if ($cep_destino !== null) {
            $formParams['CepDestino'] = ObjectSerializer::toFormValue($cep_destino);
        }
        // form params
        if ($valor !== null) {
            $formParams['Valor'] = ObjectSerializer::toFormValue($valor);
        }
        // form params
        if ($volumes !== null) {
            $formParams['volumes[]'] = ObjectSerializer::toFormValue($volumes);
        }
        // form params
        if ($altura !== null) {
            $formParams['altura[]'] = ObjectSerializer::toFormValue($altura);
        }
        // form params
        if ($largura !== null) {
            $formParams['largura[]'] = ObjectSerializer::toFormValue($largura);
        }
        // form params
        if ($comprimento !== null) {
            $formParams['comprimento[]'] = ObjectSerializer::toFormValue($comprimento);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rastreamentoPhpGet
     *
     * Consultar o status da encomenda
     *
     * @param  string $cnpj cnpj (required)
     * @param  string $token token (required)
     * @param  float $chave_n_fe chave_n_fe (optional)
     * @param  string $conhecimento conhecimento (optional)
     * @param  float $chave_c_te chave_c_te (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function rastreamentoPhpGet($cnpj, $token, $chave_n_fe = null, $conhecimento = null, $chave_c_te = null)
    {
        $this->rastreamentoPhpGetWithHttpInfo($cnpj, $token, $chave_n_fe, $conhecimento, $chave_c_te);
    }

    /**
     * Operation rastreamentoPhpGetWithHttpInfo
     *
     * Consultar o status da encomenda
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     * @param  float $chave_n_fe (optional)
     * @param  string $conhecimento (optional)
     * @param  float $chave_c_te (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function rastreamentoPhpGetWithHttpInfo($cnpj, $token, $chave_n_fe = null, $conhecimento = null, $chave_c_te = null)
    {
        $returnType = '';
        $request = $this->rastreamentoPhpGetRequest($cnpj, $token, $chave_n_fe, $conhecimento, $chave_c_te);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation rastreamentoPhpGetAsync
     *
     * Consultar o status da encomenda
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     * @param  float $chave_n_fe (optional)
     * @param  string $conhecimento (optional)
     * @param  float $chave_c_te (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rastreamentoPhpGetAsync($cnpj, $token, $chave_n_fe = null, $conhecimento = null, $chave_c_te = null)
    {
        return $this->rastreamentoPhpGetAsyncWithHttpInfo($cnpj, $token, $chave_n_fe, $conhecimento, $chave_c_te)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rastreamentoPhpGetAsyncWithHttpInfo
     *
     * Consultar o status da encomenda
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     * @param  float $chave_n_fe (optional)
     * @param  string $conhecimento (optional)
     * @param  float $chave_c_te (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rastreamentoPhpGetAsyncWithHttpInfo($cnpj, $token, $chave_n_fe = null, $conhecimento = null, $chave_c_te = null)
    {
        $returnType = '';
        $request = $this->rastreamentoPhpGetRequest($cnpj, $token, $chave_n_fe, $conhecimento, $chave_c_te);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rastreamentoPhpGet'
     *
     * @param  string $cnpj (required)
     * @param  string $token (required)
     * @param  float $chave_n_fe (optional)
     * @param  string $conhecimento (optional)
     * @param  float $chave_c_te (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function rastreamentoPhpGetRequest($cnpj, $token, $chave_n_fe = null, $conhecimento = null, $chave_c_te = null)
    {
        // verify the required parameter 'cnpj' is set
        if ($cnpj === null || (is_array($cnpj) && count($cnpj) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cnpj when calling rastreamentoPhpGet'
            );
        }
        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling rastreamentoPhpGet'
            );
        }

        $resourcePath = '/Rastreamento.php';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cnpj !== null) {
            $queryParams['CNPJ'] = ObjectSerializer::toQueryValue($cnpj);
        }
        // query params
        if ($token !== null) {
            $queryParams['Token'] = ObjectSerializer::toQueryValue($token);
        }
        // query params
        if ($chave_n_fe !== null) {
            $queryParams['ChaveNFe'] = ObjectSerializer::toQueryValue($chave_n_fe);
        }
        // query params
        if ($conhecimento !== null) {
            $queryParams['Conhecimento'] = ObjectSerializer::toQueryValue($conhecimento);
        }
        // query params
        if ($chave_c_te !== null) {
            $queryParams['ChaveCTe'] = ObjectSerializer::toQueryValue($chave_c_te);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
